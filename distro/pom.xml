<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.ozonehis</groupId>
    <artifactId>maven-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath />
  </parent>

  <groupId>com.ozonehis</groupId>
  <artifactId>ozone-msf</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
    <!-- TODO: Add any implementation-specific dependencies -->
  </dependencies>

  <build>
    <plugins>
      <!-- packaging the distro as a installable/deployable file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>Package distro artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- Override the Ozone files exclusion execution so to inherit all O3 Ref App files -->
            <id>Exclude unneeded Ozone files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/ozone</directory>
                  <excludes>
                    <exclude>distro/configs/**/addresshierarchy/*.*</exclude>
                    <exclude>distro/configs/**/attributetypes/*.*</exclude>
                    <exclude>distro/configs/**/concepts/*.*</exclude>
                    <exclude>distro/configs/**/drugs*</exclude>
                    <exclude>distro/configs/**/locations*</exclude>
                    <exclude>distro/configs/**/ocl*</exclude>
                    <exclude>distro/configs/**/ampathforms/*.json</exclude>
                    <exclude>distro/configs/**/ampathformstranslations/*.json</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy MSF Disto docker compose .txt file -->
            <id>Copy MSF Disto docker compose .txt file</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/scripts</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/../scripts</directory>
                  <includes>
                    <include>
                      docker-compose-files.txt
                    </include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

           <execution>
            <!-- Copy MSF Disto secretes -->
            <id>Copy MSF Disto secretes</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs/secretes</directory>
                  <includes>
                    <include>
                      .env
                    </include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy MSF Disto docker-compose-msf-openmrs.yml file -->
            <id>Copy MSF Disto docker-compose-msf-openmrs.yml file</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/../scripts</directory>
                  <includes>
                    <include>
                      docker-compose-msf-openmrs.yml
                    </include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>validator</id>
      <activation>
        <jdk>1.8</jdk>
        <property>
          <name>env.CI</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- hooking the OpenMRS config validation to the integration-test phase -->
          <plugin>
            <groupId>org.openmrs.maven.plugins</groupId>
            <artifactId>openmrs-packager-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>Validate OpenMRS configuration</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>validate-configurations</goal>
                </goals>
                <configuration>
                  <sourceDir>
                    ${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config</sourceDir>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>
</project>